/* Imports */
#include "./contracts/utils/Ownable.huff"
#include "./contracts/utils/Address.huff"
#include "./contracts/utils/Utils.huff"
#include "./contracts/utils/HashMap.huff"

/* Interface */
#define event TransferSingle(address, address, address, uint256, uint256)
#define event TransferBatch(address, address, address, uint256, uint256)    /* Since these last two uints are actually uint256[] should I change to that?
#define event ApprovalForAll(address, address, bool)
#define event URI(string, uint256)

/* It may be neccesary to eliminate the two subequent lines below given that they are external functions */
#define function safeTransferFrom(address, address, uint256, uint256, bytes)
#define function safeBatchTransferFrom(address, address, uint256, uint256, bytes) /* Same concern as line 9 */

#define function balanceOf(address, uint256) view returns (uint256)
#define function balanceOfBatch(address, uint256) view returns (uint256) /* Line 9 concern again for both uint256...should be arrays? */

#define setApprovalForAll(address. bool) /* Also external */
#define isApprovedForAll(address, address) view returns (bool);

/* Event Signatures */
#define constant APPROVAL_FOR_ALL_EVENT_SIGNATURE =     // @TODO

/* Storage Slots */
#define constant BALANCE_LOCATION = FREE_STORAGE_POINTER()  // balanceOf
#define constant BALANCE_OF_BATCH_LOCATION = FREE_STORAGE_POINTER()  // balanceOfBatch (@dev may need to be eliminated )

/* Constructor  */
#define macro CONSTRUCTOR() = takes(0) returns (0) {
    // Set msg.sender as the owner of the contract.
    OWNABLE_CONSTRUCTOR()
}

/* View Functions */

// the function below is taken from 721 implementation

#define macro BALANCE_OF() = takes(0) returns (0) {
    0x04 calldataload                                   // [account]
    [BALANCE_LOCATION] LOAD_ELEMENT_FROM_KEYS(0x00)     // [balance]
    0x00 mstore                                         // []
    0x20 0x00 return                                    // []

}

#define macro BALANCE_OF_BATCH() = takes(0) returns (0) {
    // @TODO
}

#define macro IS_APPROVED_FOR_ALL() = takes (0) returns (0) {
    0x24 calldataload               // [to] @info took this from 721 implementation...dont completely grasp the reason behind it
    0x04 calldataload               // [from, to]
    LOAD_ELEMENT_FROM_KEYS(0x00)    // [value]  
    
    0x00 mstore
    0x20 0x00 return
}

/* External Functions */

#define macro SET_APPROVAL_FOR_ALL() = takes(0) returns (0) {
    0x00 0x00 revert
}

  /* Transfer Functions */
#define macro SAFE_TRANSFER_FROM() = takes(0) returns (0) {
    0x00 0x00 revert
}  

#define macro SAFE_BATCH_TRANSFER_FROM() = takes(0) returns (0) {
    0x00 0x00 revert
}

#define macro SET_APPROVAL_FOR_ALL() = takes (0) returns (0) {
    0x24 calldataload                       // [approved]
    0x04 calldataload                       // [operator, approved]
    caller                                  // [msg.sender, operator, approved]
    
    STORE_ELEMENT_FROM_KEYS(0x00)           // []       // @dev is this valid?
    
    0x04 calldataload                       // [operator]
    caller                                  // [msg.sender, operator]
    0x24 calldataload                       // [approved, msg.sender, operator]
    // emit the approval event 
    0x00 mstore                             // [owner, operator]
    [APPROVAL_FOR_ALL_EVENT_SIGNATURE]      // [sig, owner, operator]
    0x00 0x00                               // [0, 32, sig, owner, operator]
    log4                                    // []
    
    stop
    error:
        0x00 0x00 revert 
}


/* Accounting Functions */

/* Transfer Functions */        // may want to move this above to be under 'external functions'

/* Mint Functions */

/* Main Macro */
#define macro MAIN() = takes(0) returns (0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr                  // @dev assuming this is incorrect, I took it from the 721 implementation
    // @dev must replace all the hashes below, they are just placeholders for now 
    dup1 0xa9059cbb eq safeTransferFrom jumpi
    dup1 0x42842e0e eq safeBatchTransferFrom jumpi
    dup1 0x095ea7b3 eq setApprovalForAll jumpi
    dup1 0x70a08231 eq balanceOf jumpi
    dup1 0x6352211e eq balanceOfBatch jumpi
    // dup1 0x01ffc9a7 eq supportsInterface jumpi
    dup1 0xe985e9c5 eq isApprovedForAll jumpi
    
    
    safeTransferFrom:
        SAFE_TRANSFER_FROM()        // @dev not yet implemented
    safeBatchTransferFrom:
        SAFE_BATCH_TRANSFER_FROM()  // @dev not yet implemented
    setApprovalForAll:
        SET_APPROVAL_FOR_ALL()
    balanceOf:
        BALANCE_OF()
    balanceOfBatch:
        BALANCE_OF_BATCH()
    isApprovedForAll:
        IS_APPROVED_FOR_ALL()

}

